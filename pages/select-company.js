import {
  Alert,
  Autocomplete,
  Box,
  Button,
  CircularProgress,
  Container,
  FormControl,
  FormLabel,
  Grid,
  TextField,
  Typography,
} from '@mui/material'
import Head from 'next/head'
import registerImage from '../public/Images/register.png'
import Image from 'next/image'
import React, { useState } from 'react'
import en from 'locales/en'
import pt from 'locales/pt'
import { useRouter } from 'next/router'
import { useBrokerReviewMutation } from '@/queries/useBrokerReviewMutation'
import toast from 'react-hot-toast'
import { useGetProposalQuery } from '@/queries/useGetProposalQuery'
import { useSendCompanyMutation } from '@/queries/useSendCompanyMutation'
import { useGetCompanyListQuery } from '@/queries/UseGetCompanyListQuery'
import VehicleDetails from '@/component/vehicleDetails/VehicleDetails'

export default function SelectCompany({ languageName }) {
  const router = useRouter()
  const { query } = router
  const {
    data: proposalData,
    isLoading,
    isFetching,
    isFetched,
  } = useGetProposalQuery(query?.proposal_id)
  const { data: carData } = useGetCompanyListQuery({ type: 'car' })

  const t = languageName === 'en' ? en : pt
  const [selectedOption, setSelectedOption] = useState(null)
  const [loading, setLoading] = useState(false)

  const mutation = useSendCompanyMutation()

  const handleSubmit = () => {
    setLoading(true)
    if (!selectedOption) {
      toast.error('Selecionar empresa de automóveis é obrigatória')
    } else {
      const body = {
        user_id: selectedOption?.user?.id,
        vehicle_id: +query?.vehicle_id,
      }
      console.log({ body })
      mutation.mutate(body, {
        onError(error) {
          setLoading(false)
          toast.error('Falha ao enviar detalhes da montadora')
        },
        onSuccess: async (data) => {
          setLoading(false)
          toast.success('Empresa de automóveis enviou detalhes com sucesso')
          router.push('/')
        },
      })
    }
  }
  const vehicleInfo = proposalData?.data?.proposal?.vehicle

  if ((isFetched && isFetching) || isLoading) {
    return (
      <Container maxWidth="md" sx={{ px: 2, py: 0 }}>
        <Grid
          container
          direction="row"
          justifyContent="center"
          alignItems="center"
          sx={{ height: '100vh' }}
        >
          <CircularProgress size="8rem" />
        </Grid>
      </Container>
    )
  }

  return (
    <div>
      <Head>
        <title>Lokkan - A imobiliária digital</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/negotiate.png" />
      </Head>

      <main className="section">
        <Box sx={{ px: 5 }}>
          <Grid container spacing={1}>
            <Grid item xs={12} sm={12} md={12} lg={4} xl={4}>
              <Grid container direction="row" sx={{ py: 4, height: '100vh' }}>
                <Container>
                  <Typography varinat="p" sx={{ fontSize: '30px' }}>
                    Selecione uma empresa para saber o valor do veículo
                  </Typography>
                  <Box>
                    <VehicleDetails car={vehicleInfo} />
                  </Box>
                  <Box
                    sx={{ width: '100%', maxWidth: 400, margin: '20px auto' }}
                  >
                    <FormControl fullWidth variant="outlined">
                      <FormLabel sx={{ mb: 1 }}>
                        qual empresa de veículos você deseja selecionar?
                      </FormLabel>
                      <Autocomplete
                        options={carData || []}
                        getOptionLabel={(option) => option?.user?.name}
                        value={selectedOption}
                        onChange={(event, newValue) =>
                          setSelectedOption(newValue)
                        }
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="Selecione a empresa"
                            variant="outlined"
                            sx={{
                              '& .MuiOutlinedInput-root': {
                                '& fieldset': {
                                  borderColor: 'primary.main', // Primary color border
                                },
                                '&:hover fieldset': {
                                  borderColor: 'secondary.main', // Secondary color on hover
                                },
                                '&.Mui-focused fieldset': {
                                  borderColor: 'secondary.main', // Secondary color when focused
                                },
                              },
                              backgroundColor: '#f9f9f9',
                            }}
                          />
                        )}
                        sx={{
                          '& .MuiAutocomplete-listbox': {
                            backgroundColor: '#fff', // Background color for the dropdown list
                            border: '1px solid #ddd', // Border for the dropdown list
                          },
                          '& .MuiAutocomplete-option': {
                            '&:hover': {
                              backgroundColor: '#f0f0f0', // Background color on hover
                            },
                          },
                        }}
                      />

                      <Grid
                        container
                        direction="row"
                        sx={{
                          justifyContent: 'flex-end',
                          alignItems: 'center',
                          mt: 2,
                        }}
                      >
                        <Button
                          disabled={loading}
                          variant="contained"
                          color="primary"
                          onClick={handleSubmit}
                          sx={{ textTransform: 'none' }}
                        >
                          {loading && (
                            <CircularProgress size={22} color="inherit" />
                          )}
                          {!loading && 'Enviar'}
                        </Button>
                      </Grid>
                    </FormControl>
                  </Box>
                </Container>
              </Grid>
            </Grid>
            <Grid item xs={12} sm={12} md={12} lg={8} xl={8}>
              <Box>
                <Image src={registerImage} alt="register" />
              </Box>
            </Grid>
          </Grid>
        </Box>
      </main>
    </div>
  )
}

import {
  Box,
  Button,
  CircularProgress,
  Container,
  FormControl,
  FormLabel,
  Grid,
  Typography,
} from '@mui/material'
import Head from 'next/head'
import registerImage from '../public/Images/register.png'
import Image from 'next/image'
import React, { useState } from 'react'
import en from 'locales/en'
import pt from 'locales/pt'
import { useRouter } from 'next/router'
import toast from 'react-hot-toast'
import BaseValueField from '@/component/reuseable/baseValueField/BaseValueFiled'
import { useVehicleReviewMutation } from '@/queries/useVehicleReviewMutation'
import { reverseBrCurrencyFormat } from '@/utils/reverseBrCurrencyFormat'
import { useGetSingleVehicleQuery } from '@/queries/useGetSingleVehicleQuery'
import VehicleDetails from '@/component/vehicleDetails/VehicleDetails'

export default function VehicleReview({ languageName }) {
  const router = useRouter()
  const { query } = router
  const {
    data: vehicleData,
    isLoading,
    isFetching,
    isFetched,
  } = useGetSingleVehicleQuery(+query?.vehicle_id)
  const vehicleInfo = vehicleData?.data?.data
  const t = languageName === 'en' ? en : pt
  const [value, setValue] = useState(null)
  const [loading, setLoading] = useState(false)

  const mutation = useVehicleReviewMutation()

  const handleSubmit = () => {
    setLoading(false)
    if (!value) {
      toast.error('O campo valor em Brl é obrigatório')
    } else {
      const body = {
        price: reverseBrCurrencyFormat(value),
        vehicle_id: +query?.vehicle_id,
        user_id: query?.user_id,
      }
      mutation.mutate(body, {
        onError(error) {
          setLoading(false)
          toast.error('Falha no valor em BRL')
        },
        onSuccess: async (data) => {
          setLoading(false)
          toast.success('Valor em Brl enviado com sucesso')
          router.push('/')
        },
      })
    }
  }

  if ((isFetched && isFetching) || isLoading) {
    return (
      <Container maxWidth="md" sx={{ px: 2, py: 0 }}>
        <Grid
          container
          direction="row"
          justifyContent="center"
          alignItems="center"
          sx={{ height: '100vh' }}
        >
          <CircularProgress size="8rem" />
        </Grid>
      </Container>
    )
  }

  return (
    <div>
      <Head>
        <title>Lokkan - A imobiliária digital</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/negotiate.png" />
      </Head>

      <main className="section">
        <Box sx={{ px: 5 }}>
          <Grid container spacing={1}>
            <Grid item xs={12} sm={12} md={12} lg={4} xl={4}>
              <Grid
                container
                direction="row"
                // justifyContent="center"
                // alignItems="center"
                sx={{ py: 4, height: '100vh' }}
              >
                <Container>
                  <Typography varinat="p" sx={{ fontSize: '30px' }}>
                    Informe o valor do veículo
                  </Typography>
                  <Box>
                    <VehicleDetails car={vehicleInfo} />
                  </Box>
                  <Box
                    sx={{ width: '100%', maxWidth: 400, margin: '20px auto' }}
                  >
                    <FormControl fullWidth variant="outlined">
                      <FormLabel sx={{ mb: 1 }}>Valor em reais</FormLabel>
                      <BaseValueField
                        size={'medium'}
                        name="brl_value"
                        placeholder={`R$`}
                        type={'number'}
                        onChange={(e) => {
                          //   field.onChange(e.target.value);
                          setValue(e.target.value)
                        }}
                        value={value}
                      />

                      <Grid
                        container
                        direction="row"
                        sx={{
                          justifyContent: 'flex-end',
                          alignItems: 'center',
                          mt: 2,
                        }}
                      >
                        <Button
                          disabled={loading}
                          variant="contained"
                          color="primary"
                          onClick={handleSubmit}
                          sx={{ textTransform: 'none' }}
                        >
                          {loading && (
                            <CircularProgress size={22} color="inherit" />
                          )}
                          {!loading && 'Enviar'}
                        </Button>
                      </Grid>
                    </FormControl>
                  </Box>
                </Container>
              </Grid>
            </Grid>
            <Grid item xs={12} sm={12} md={12} lg={8} xl={8}>
              <Box>
                <Image src={registerImage} alt="register" />
              </Box>
            </Grid>
          </Grid>
        </Box>
      </main>
    </div>
  )
}
